{"version":3,"sources":["component/Wrapper/index.js","component/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Card","onClick","clickPic","id","alt","name","src","image","App","state","characters","score","highscore","chosenArray","alertMessage","shakeit","shuffledArray","setState","includes","concat","console","log","picArray","i","length","k","Math","floor","random","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6mEAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCQ1BC,MAVf,SAAcH,GACV,OACI,yBAAKC,UAAU,OAAOG,QAAS,kBAAMJ,EAAMK,SAASL,EAAMM,MACtD,yBAAKL,UAAU,iBACX,yBAAKM,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,WCiElCC,E,2MA/DbC,MAAQ,CACNC,aACAC,MAAO,EACPC,UAAW,EACXC,YAAa,GACbC,aAAc,GACdC,SAAS,G,EAEXb,SAAW,SAAAC,GAET,IAAMa,EAAgB,EAAKA,cAAcN,GACzC,EAAKO,SAAS,CAAEP,WAAYM,IACxB,EAAKP,MAAMI,YAAYK,SAASf,GAClC,EAAKc,SAAS,CAAEN,MAAO,EAAGE,YAAa,GAAIC,aAAc,+BAAgCC,SAAS,IAGlG,EAAKE,SAAS,CACZJ,YAAa,EAAKJ,MAAMI,YAAYM,OAAO,CAAChB,IAC5CQ,MAAO,EAAKF,MAAME,MAAQ,EAC1BG,aAAc,WACdC,SAAS,IAGT,EAAKN,MAAME,MAAQ,EAAKF,MAAMG,YAChC,EAAKK,SAAS,CAAEL,UAAW,EAAKH,MAAME,QACtCS,QAAQC,IAAI,CAAET,UAAW,EAAKH,MAAME,U,EAGxCK,cAAgB,SAACM,GACf,IAAK,IAAIC,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADE,EAEf,CAACD,EAASG,GAAIH,EAASC,IAAnDD,EAASC,GAFkC,KAE9BD,EAASG,GAFqB,KAI9C,OAAOH,G,wEAGC,IAAD,OACP,OACE,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,aACf,wBAAIA,UAAU,aAAd,oCAEF,wBAAIA,UAAU,aACZ,uBAAGA,UAAU,SAAb,UAA6B+B,KAAKpB,MAAME,MAAxC,iBAA6DkB,KAAKpB,MAAMG,YAE1E,kBAAC,EAAD,KACGiB,KAAKpB,MAAMC,WAAWoB,KAAI,SAAApB,GAAU,OACnC,kBAAC,EAAD,CACEP,GAAIO,EAAWP,GACf4B,IAAKrB,EAAWP,GAChBE,KAAMK,EAAWL,KACjBE,MAAOG,EAAWH,MAClBL,SAAY,EAAKA,oB,GAtDb8B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1d1cb6fa.chunk.js","sourcesContent":["import React from \"react\";\r\n// import \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./card.css\"\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"card\" onClick={() => props.clickPic(props.id)}>\r\n            <div className=\"img-container\">\r\n                <img alt={props.name} src={props.image} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport './App.css';\nimport characters from \"./characters.json\";\n// import Title from \"./component/Title\";\nimport Wrapper from \"./component/Wrapper\"\nimport Card from \"./component/Card\"\n\nclass App extends Component {\n  state = {\n    characters,\n    score: 0,\n    highscore: 0,\n    chosenArray: [],\n    alertMessage: \"\",\n    shakeit: false\n  };\n  clickPic = id => {\n    // this will rearrange card randomly\n    const shuffledArray = this.shuffledArray(characters);\n    this.setState({ characters: shuffledArray });\n    if (this.state.chosenArray.includes(id)) {\n      this.setState({ score: 0, chosenArray: [], alertMessage: \"Incorrect Choice. Try Again.\", shakeit: true })\n    }\n    else {\n      this.setState({\n        chosenArray: this.state.chosenArray.concat([id]),\n        score: this.state.score + 1,\n        alertMessage: \"Correct!\",\n        shakeit: false\n      });\n    }\n    if (this.state.score > this.state.highscore) {\n      this.setState({ highscore: this.state.score })\n      console.log({ highscore: this.state.score })\n    }\n  }\n  shuffledArray = (picArray) => {\n    for (let i = picArray.length - 1; i > 0; i--) {\n      const k = Math.floor(Math.random() * (i + 1));\n      [picArray[i], picArray[k]] = [picArray[k], picArray[i]]\n    }\n    return picArray;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img className=\"App-logo\" />\n          <h1 className=\"App-title\">Welcome to Pic it and Click it!</h1>\n        </header>\n        <h3 className=\"App-intro\">\n          <p className=\"score\">Score: {this.state.score} | Highscore: {this.state.highscore}</p>\n        </h3>\n        <Wrapper>\n          {this.state.characters.map(characters => (\n            <Card\n              id={characters.id}\n              key={characters.id}\n              name={characters.name}\n              image={characters.image}\n              clickPic = {this.clickPic}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}